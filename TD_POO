#exercice 1
class Eleve:
    def __init__(self,nom,classe,note):
        self.nom = nom
        self.classe = classe
        self.note = note
    
    def comparer(self,eleve2):
        if self.note == eleve2.note:
            return self.nom, eleve2.nom
        elif self.note < eleve2.note:
            return eleve2.nom
        else:
            return self.nom
    
    def a_la_moyenne(self,n_max):
        if self.note >= n_max//2:
            return True
        else:
            return False

Abdel = Eleve("Abdel","TG",12)
Hamza = Eleve("Hamza","TG",5)

print(Abdel.comparer(Hamza))
print(Abdel.a_la_moyenne(20))

#exercice 2.1
from math import sqrt
class TriangleRectangle:
    def __init__(self,c1,c2):
        cote1 = c1
        cote2 = c2
        hypothenuse = sqrt(c1**2+c2**2)

#exercice 2.2
from math import sqrt

class TriangleRectangle :
    def __init__(self,c1,c2):
        self.cote1 = c1
        self.cote2 = c2
        self.hypothenuse = sqrt(c1**2 + c2**2)
    
    def get_cote1(self):
        return self.cote1
    
    def get_cote2(self):
        return self.cote2
    
    def get_hypothenuse(self):
        return self.hypothenuse
    
    def set_cote1(self,nv_c1):
        self.cote1 = nv_c1
        self.hypothenuse = sqrt(nv_c1**2 + self.cote2**2)
        
    def set_cote2(self,nv_c2):
        self.cote2 = nv_c2
        self.hypothenuse = sqrt(self.cote1**2 + nv_c2**2) 

#exercice 4
from math import sqrt

class Point:
    def __init__(self,x,y):
        """
        Description de la fonction : permet de définir les attributs de l'objet
        x (int) : l'abscisse du point
        y (int) : l'ordonnée du point
        """
        self.abscisse = x
        self.ordonnée = y
    
    def __repr__(self):
        """
        Description de la fonction : permet d'afficher l'objet souhaité, ici de manière (x,y)
        return (tuple) : l'objet sous forme (x,y)
        """
        return "(" + str(self.abscisse) + "," + str(self.ordonnée) + ")"
    
    def distance(self):
        """
        Description de la fonction : permet d'obtenir la distance entre un point et l'origine du repère
        return (int) : la distance entre un point et l'origine du repère
        """
        return sqrt(self.abscisse**2 + self.ordonnée**2)

A = Point(-2,5)
print(A.distance())
B = Point(5,5)
print(B.distance())
C = Point(-2,-2)
print(C.distance())
D = Point(5,-2)
print(D.distance())

def longueur_segment(A,B):
    """
    Description de la fonction : calcule la longueur entre 2 points
    A (class_Point) : le point du début de segment
    B (class_Point) : le point de fin de segment
    return (int) : renvoie la longueur entre 2 points
    """
    return sqrt((A.abscisse - B.abscisse)**2 + (A.ordonnée - B.ordonnée)**2)

print(longueur_segment(A,B))
print(longueur_segment(C,D))
