#SUJET BAC 1
#exercice 1
def recherche(caractere,mot):
    occurrence = 0
    for e in mot:
        if e == caractere:
            occurrence = occurrence + 1
    return occurrence
print(recherche('e', "sciences"))
print(recherche('i',"mississippi"))
print(recherche('a',"mississippi"))

#SUJET BAC 2
#exercice 1
def moyenne(liste):
    num = 0
    denom = 0
    for tupl in liste:
        num = num + tupl[0] * tupl[1]
        denom = denom + tupl[1]
    return num/denom
print(moyenne([(15,2),(9,1),(12,3)]))

#exercice 2
def pascal(n):
    C = [[1]]
    for k in range (1,n+1):
        Ck = [1]
        for i in range(1,k):
            Ck.append(C[k-1][i-1] + C[k-1][i])
        Ck.append(1)
        C.append(Ck)
    return C
print(pascal(5))

#SUJET BAC 3
#exercice 1
def delta(tab):
    res = []
    for i in range(len(tab)):
        if i == 0:
            res = res + [tab[0]]
        else:
            res = res + [(tab[i] - tab[i-1])]
    return res
print(delta([1000, 800, 802, 1000, 1003]))
print(delta([42]))

#Sujet BAC 4
#exercice 1
def recherche(tab):
    couple = []
    for i in range(len(tab)-1):
        if tab[i] + 1 == tab[i+1]:
            couple = couple + [(tab[i],tab[i+1])]
    return couple
print(recherche([1,4,3,5]))
print(recherche([5,1,2,3,8,-5,-4,7]))

#SUJET BAC 5
#exercice 1
def RechercheMinMax(tab):
    res = {}
    if tab == []:
        res["min"] = None
        res["max"] = None
        return res
    min = tab[0]
    max = tab[0]
    for i in range(len(tab)):
        if min > tab[i]:
            min = tab[i]
        elif max < tab[i]:
            max = tab[i]
    res["min"] = min
    res["max"] = max
    return res
tableau = [0, 1, 4, 2, -2, 9, 3, 1, 7, 1]
print(RechercheMinMax(tableau))

#exercice 2
class Carte:
    """Initialise Couleur (entre 1 à 4), et Valeur (entre 1 à 13)"""
    def __init__(self, c, v):
        assert c >= 1 and c <= 4, "le 1er paramètre (couleur) n'est pas compris entre 1 et 4"
        assert v >= 1 and v <= 13, "le 2ème paramètre (valeur) n'est pas compris entre 1 et 13"
        self.Couleur = c
        self.Valeur = v

    """Renvoie le nom de la Carte As, 2, ... 10, 
       Valet, Dame, Roi"""
    def getNom(self):
        if ( self.Valeur > 1 and self.Valeur < 11):
            return str( self.Valeur)
        elif self.Valeur == 11:
            return "Valet"
        elif self.Valeur == 12:
            return "Dame"
        elif self.Valeur == 13:
            return "Roi"
        else:
            return "As"

    """Renvoie la couleur de la Carte (parmi pique, coeur, carreau, trefle"""
    def getCouleur(self):
        return ['pique', 'coeur', 'carreau', 'trefle' ][self.Couleur - 1]

class PaquetDeCarte:
    def __init__(self):
        self.contenu = []

    """Remplit le paquet de cartes"""
    def remplir(self):
        c = 1
        while c < 5:
            for v in range(13):
                self.contenu = self.contenu + [Carte(c,v + 1)]
            c = c + 1

    """Renvoie la Carte qui se trouve à la position donnée"""
    def getCarteAt(self, pos):
        assert pos >= 1 and pos <= 52, "le paramètre n'est pas compris entre 1 et 52" 
        return self.contenu[pos - 1]

unPaquet = PaquetDeCarte()
unPaquet.remplir()
uneCarte = unPaquet.getCarteAt(20)
print(uneCarte.getNom() + " de " + uneCarte.getCouleur())

#SUJET BAC 6
#exercice 1
def maxi(tab):
    nb_max = tab[0],0
    for i in range(len(tab)):
        if tab[i] > nb_max[0]:
            nb_max = tab[i],i
    return nb_max
print(maxi([1,5,6,9,1,2,3,7,9,8]))

#SUJET BAC 15
#exercice 1
def nb_repetitions(elt,tab):
    resultat = 0
    for e in tab:
        if e == elt:
            resultat = resultat + 1
    return resultat
print(nb_repetitions(5,[2,5,3,5,6,9,5]))
print(nb_repetitions('A',[ 'B', 'A', 'B', 'A', 'R']))
print(nb_repetitions(12,[1, '! ',7,21,36,44]))

#exercice 2
def binaire(a):
    bin_a = str(a%2)
    a = a // 2
    while a != 0 :
        bin_a = str(a%2) + bin_a
        a = a//2
    return bin_a
print(binaire(0))
print(binaire(77))

#SUJET BAC 16
#exercice 1
def maxi(tab):
    res = 0
    i_max = 0
    for i in range(len(tab)):
        if tab[i] > res :
            res = tab[i]
            i_max = i
    return res,i_max
print(maxi([1,5,6,9,1,2,3,7,9,8]))

#exercice 2
def positif(T):
    T2 = list(T)
    T3 = []
    while T2 != []:
        x = T2.pop()
        if x >= 0:
            T3.append(x)
    T2 = []
    while T3 != []:
        x = T3.pop()
        T2.append(x)
    print('T = ',T)
    return T2

print(positif([-1,0,5,-3,4,-6,10,9,-8 ]))

#SUJET BAC 17
#exercice 1
def nombre_de_mots(phrase):
    mots = 0
    for e in phrase:
        if e == ' ':
            mots = mots + 1
        elif e == '.':
            mots = mots + 1
    return mots
print(nombre_de_mots('Le point d exclamation est separe !'))
print(nombre_de_mots('Il y a un seul espace entre les mots !'))
print(nombre_de_mots('Le point final est colle au dernier mot.'))
print(nombre_de_mots('Gilbouze macarbi acra cor ed filbuzine ?'))

#SUJET BAC 18
#exercice 1
t_moy = [14.9, 13.3, 13.1, 12.5, 13.0, 13.6, 13.7]
annees = [2013, 2014, 2015, 2016, 2017, 2018, 2019]

def mini(releve,date) :
    t_min = releve[0]
    ind_min = 0
    for i in range(len(releve)) :
        if t_min > releve[i] :
            t_min = releve[i]
            ind_min = i
    return t_min,date[ind_min]

print(mini(t_moy,annees))

#SUJET BAC 19
#exercice 1
def multiplication(n1,n2):
    x = 0
    if n1 < 0 and n2 < 0:
        n1 = abs(n1)
    if n2 < 0:
        n2 = abs(n2)
    while n2 != 0:
        x = x + n1
        n2 = n2 - 1
    return x

#exercice 2
def chercher(T,n,i,j):
    if i < 0 or len(T) < j :
        print("Erreur")
        return None 
    if i > j :
        return None
    m = (i+j) // 2
    if T[m] < n :
        return chercher(T, n, m, j)
    elif T[m] > n :
        return chercher(T, n, i, m)
    else :
        return m

#SUJET BAC 20
#exercice 1
def xor(tab1,tab2):
    res = []
    for i in range(len(tab1)):
        if tab1[i] == tab2[i]:
            res.append(0)
        else :
            res.append(1)
    return res

a = [1, 0, 1, 0, 1, 1, 0, 1] 
b = [0, 1, 1, 1, 0, 1, 0, 0]
c = [1, 1, 0, 1]
d = [0, 0, 1, 1]
assert(xor(a, b) == [1, 1, 0, 1, 1, 0, 0, 1])
assert(xor(c, d) == [1, 1, 1, 0])

#exercice 2
class Carre:
    def __init__(self, tableau = [[]]):
        self.ordre = len(tableau)
        self.valeurs = tableau
    
    def affiche(self):
        '''Affiche un carré'''
        for i in range(self.ordre):
            print(self.valeurs[i])
    
    def somme_ligne(self, i):
        '''Calcule la somme des valeurs de la ligne i'''
        return sum(self.valeurs[i])
    
    def somme_col(self, j):
        '''calcule la somme des valeurs de la colonne j'''
        return sum([self.valeurs[i][j] for i in range(self.ordre)])

def est_magique(carre):
    n = carre.ordre
    s = carre.somme_ligne(0)
        
    #test de la somme de chaque ligne
    for i in range(n):
        if carre.somme_ligne(i) != s:
            return False
        
    #test de la somme de chaque colonne
    for j in range(n):
        if carre.somme_col(j) != s:
            return False
         
    #test de la somme de chaque diagonale
    if sum([carre.valeurs[k][k] for k in range(n)]) != s:
            return False
    if sum([carre.valeurs[k][n-1-k] for k in range(n)]) != s:
            return False
    return True

c2 = Carre([[1,1],[1,1]])
c3 = Carre([[2,9,4],[7,5,3],[6,1,8]])
c4 = Carre([[4,5,16,9],[14,7,2,11],[3,10,15,6],[13,12,8,1]])

print(est_magique(c2))
print(est_magique(c3))
print(est_magique(c4))

#SUJET BAC 23
#exercice 1
d1 = {'Bob': 102, 'Ada': 201, 'Alice': 103, 'Tim': 50}
d2 = {'Alan': 222, 'Ada': 201, 'Eve': 220, 'Tim': 50}

def max_dico(dico):
    like_max = 0
    res = ()
    for t in dico.items():
        if t[1] > like_max:
            like_max = t[1]
            res = t
    return res

#exercice 2

class Pile:
    """Classe définissant une structure de pile."""
    def __init__(self):
        self.contenu = []
    
    def est_vide(self):
        """
        Renvoie le booléen True si la pile est vide, False sinon.
        """
        return self.contenu == []
    
    def empiler(self, v):
        """Place l’élément v au sommet de la pile."""
        self.contenu.append(v)
    
    def depiler(self):
        """
        Retire et renvoie l’élément placé au sommet de la pile, 
        si la pile n’est pas vide.
        """
        if not self.est_vide():
            return self.contenu.pop()


def eval_expression(tab):
    p = Pile()
    for element in tab:
        if element != '+' and element != '*':
            p.empiler(element)
        else:
            if element == '+': 
                resultat = p.depiler() + p.depiler()
            else:
                resultat = p.depiler() * p.depiler()
            p.empiler(resultat)
    return p.depiler()

print(eval_expression([2, 3, '+', 5, '*']))
