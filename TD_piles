from ma_pile import creer_pile, est_vide, empiler, depiler, afficher_pile

#exercice 1
#3)
def pile_alternee(n):
    p = creer_pile()
    for i in range(n+1):
        if i % 2 == 0:
            empiler(p,i)
        else :
            empiler(p,-i)
    return p

afficher_pile(pile_alternee(6))

#exercice 2

def vider_pile(p):
    while est_vide(p) == False:
        depiler(p)

def sommet_pile(p):
    if est_vide(p) == True:
        return None
    k = depiler(p)
    empiler(p,k)
    return k

def taille_pile(p):
    res = 0
    if est_vide(p) == True:
        return res
    p2 = creer_pile()
    while est_vide(p) == False:
        empiler(p2,depiler(p))
        res = res + 1
    while est_vide(p2) == False:
        empiler(p,depiler(p2))
    return res

def inverser_pile(p):
    p2 = creer_pile()
    p3 = creer_pile()
    while est_vide(p) == False:
        empiler(p2,depiler(p))
    while est_vide(p2) == False:
        empiler(p3,depiler(p2))
    while est_vide(p3) == False:
        empiler(p,depiler(p3))

#exercice 3

def est_bien_parenthesee(chaine):
    p = creer_pile()
    for e in chaine:
        if e == "(":
            empiler(p,e)
        elif e == ")":
            if est_vide(p) == False:
                depiler(p)
            else:
                return False
    if est_vide(p) == False:
        return False
    return True

#exercice 4

def separer_postfixee(chaine):
    return chaine.split(' ')

def est_operateur(str):
    for e in str:
        if (e == "+" or e == "-") or (e == "*" or e == "/"):
            return True
        else:
            return False

def evaluer_postfixee(chaine):
    pile = creer_pile()
    pile2 = creer_pile()
    liste = separer_postfixee(chaine)
    for e in liste:
        if est_operateur(e) == False:
            empiler(pile,e)
        elif e == "-":
            for i in range(2):
                empiler(pile2,depiler(pile))
            empiler(pile,eval(str(depiler(pile2)) + e + str(depiler(pile2))))
        else:
            empiler(pile,eval(str(depiler(pile)) + e + str(depiler(pile))))
    return depiler(pile)

#exercice 6

class Pile:
    def __init__(self,nb_max):
        self.contenue = [None] * nb_max
        self.taille_max = nb_max
        self.taille = self.taille_pile()
    
    def est_vide(self):
        for e in self.contenue:
            if e != None:
                return False
        return True
    
    def empiler(self,e):
        assert None in self.contenue, "Erreur = la pile est remplie"
        i = 0
        while i < self.taille_max:
             if self.contenue[i] == None:
                  self.contenue[i] = e
             else:
                  i = i + 1
    
    def depiler(self):
        assert not(self.est_vide()), "Erreur = la pile est vide"
        i = 0
        while i < self.taille_max:
             if self.contenue[i] == None:
                  res = self.contenue.pop(i-1)
             else:
                  i = i + 1
        return res
    
    def taille_pile(self):
        i = 0
        res = 0
        while i < self.taille_max:
            if self.contenue[i] != None:
                res = res + 1
                i = i + 1
            else :
                return res
p1 = Pile(4)
p1.est_vide()
p1.empiler("5")
p1.depiler()
p1.taille

##%%time
##p1 = creer_pile()
##for i in range(10000):
##    empiler(p1, i)
##    taille_pile(p1)
##
##%%time
##p2 = Pile(10000)
##for i in range(10000):
##    p2.empiler(i)
##    p2.taille_pile()
