#Activité 1
class Pile:
    """Classe permettant d'empiler plusieurs élément et de dépiler le dernier élément reçu, le sommet de la pile"""
    def __init__(self): # Les éléments sont stockés dans une liste python
        self.data = []
      
    def est_vide(self):
        return len(self.data) == 0 
    
    # Le choix suivant a été fait : Le sommet de la pile correspond au dernier élément de la liste
    
    def empile(self,x):
        self.data.append(x)

    def depile(self):
        assert not self.est_vide(), "Vous avez essayé de dépiler une pile vide !"
        x = self.data[self.taille() - 1 : self.taille()][0]
        self.data = self.data[0 : self.taille() - 1]
        return x
    
    def taille(self):
        return len(self.data)

    def __repr__(self):       # Hors-Programme : pour afficher convenablement la pile
        s = "".center(5, "-") + "\n"              
        for i in range(len(self.data)-1, -1, -1) :
            s = s + str(self.data[i]).center(5) + "\n" + "".center(5, "-") + "\n"
        return s



#Activité 2
class Pile2:
    """Classe permettant d'empiler plusieurs élément et de dépiler le premier élément reçu, le sommet de la pile"""
    def __init__(self): # Les éléments sont stockés dans une liste python
        self.data = []
      
    def est_vide(self):
        return len(self.data) == 0 
    
    # Le choix suivant a été fait : Le sommet de la pile correspond au premier élément de la liste
    
    def empile(self,x):
        self.data.insert(0,x)

    def depile(self):
        assert not self.est_vide(), "Vous avez essayé de dépiler une pile vide !"
        return self.data.pop()

    def __repr__(self):       # Hors-Programme : pour afficher convenablement la pile
        s = "".center(5, "-") + "\n"              
        for i in range(len(self.data)-1, -1, -1) :
            s = s + str(self.data[i]).center(5) + "\n" + "".center(5, "-") + "\n"
        return s
