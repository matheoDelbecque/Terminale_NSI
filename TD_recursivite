#exercice 1 (pas finie)
def somme_recursif(n):
    if n == 0 :
        return 0
    else : 
        return n + somme_recursif(n-1)

##somme_recursif(100)

def somme_iteratif(n):
    somme = 0
    for e in range(n+1):
        somme = somme + e
    return somme

##print(somme_iteratif(4))

import timeit

print(timeit.timeit('somme_recursif(100)', number=50, setup="from __main__ import somme_recursif"))
print(timeit.timeit('somme_iteratif(100)', number=50, setup="from __main__ import somme_iteratif"))

#exercice 2
# Q1
def prems(n):
    if n == 0 :
        return None
    else :
        print("un très mauvais exemple")
        prems(n-1)

prems(4)

# Q2
def prems(n):
    if n != 0 :
        print("un très mauvais exemple")
        prems(n-1)
    else :
        return None

prems(4)

# exercice 3
def factorielle(n):
    if n == 1 :
        return 1
    elif n == 0 :
        return 1
    else :
        calcul = n * factorielle(n-1)
        return calcul
print(factorielle(0))

# exercice 4
def fonctionDeux(n):
    if n == 0 :
        return 1
    else :
        return n + fonctionDeux(n-2)
print(fonctionDeux(10))
print(fonctionDeux(5))

def mystere(n,p):
    """
    n et p sont deux entiers naturels
    """
    if p == 0 :
        return 0
    else :
        return n + mystere(n, p-1)

print(mystere(3,6))

#exercice 5
#Q1
def puissance(a,n):
    if n == 0:
        return 1
    else:
        return a * puissance(a,n-1)

print(puissance(2,5))

#Q2
def puissance_V2(a,n):
    if n == 0 :
        return 1
    elif n % 2 == 0:
        return puissance_V2(a*a,n/2)
    else :
        return a * puissance_V2(a*a,(n-1)/2)

print(puissance_V2(2,5))

#exercice 6
def pgcd(a,b):
    if b == 0:
        return a
    else:
        return pgcd(b,a%b)
print(pgcd(2562,78))

#exercice 7.1
def nombre_de_chiffres(x):
    if x == 0:
        return 0
    else:
        return nombre_de_chiffres(x//10) + 1
print(nombre_de_chiffres(34639))
